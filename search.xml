<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang笔记(2)</title>
      <link href="2021/09/09/golang-bi-ji-2/"/>
      <url>2021/09/09/golang-bi-ji-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang笔记(1)——字符串</title>
      <link href="2021/09/07/golang-bi-ji-1/"/>
      <url>2021/09/07/golang-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>学习Go语言的主要目的是为了在明年暑假左右找到一份实习，目标是年前完成语言和框架的学习，年后开始刷题、学习网络、数据库等内容，加油！！！</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在学习字符串的过程中，得益于Go语言类似于Python切片的特性，以及对<code>UTF-8</code>编码方式的支持，发现了一个非常精妙的解决字符串前缀和后缀问题的解决方法。具体的解决代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//测试一个字符串是否是另一个字符串的前缀</span><span class="token keyword">func</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> prefix<span class="token punctuation">}</span><span class="token comment">//后缀测试</span><span class="token keyword">func</span> <span class="token function">HasSuffix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> suffix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> suffix<span class="token punctuation">}</span><span class="token comment">//应用：包含子串测试</span><span class="token keyword">func</span> <span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> substr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> substr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论使用何种编程语言，对字符串的处理通常而言是最多的，所以一些常见的对字符串的处理方法要记住或者有印象，防止再去重复造轮子，那么在圣经一书中，给出了四个常用的处理字符串的包：<code>bytes、strings、strconv、unicode</code>，关于字符串的许多方法都可以在其中找到。</p><p>下面的例子展示了为数值每隔三个字符加上逗号，如“12345”变为“12,345”：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//下面的这个方法仅适用于整数，不适用于浮点数</span><span class="token keyword">func</span> <span class="token function">comma</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">comma</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//习题3.10: 改为非递归版本</span><span class="token keyword">func</span> <span class="token function">commaNonre</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer    i <span class="token operator">:=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span>            buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//习题3.11: 支持浮点数及增加对正负号的处理</span><span class="token keyword">func</span> <span class="token function">commaDecimal</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token function">commaDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">prefectComma</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token function">comma</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token function">commaDecimal</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token function">comma</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的地方是，字符串是只读的，而slice元素则可以被自由更改。</p><p>学习字符串时，遇到了这样一道习题：</p><blockquote><p> 编写一个函数，判断两个字符串是否是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。 </p></blockquote><p>那么这个问题使用<code>map</code>是很好解决的，但是自己在学习其他语言的时候又没有很好地使用过这个数据结构，所以现在先简单的学习一下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建一个映射，键的类型为string，值的类型为int，有两种初始化方法</span><span class="token comment">//下面的代码为第1种初始化方法，此时创建了一个空的map</span>dict <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//下面的代码为第2种初始化方法，这与上面的代码是等价的</span>dict <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//测试map中的key值是否存在</span><span class="token comment">//1.同时取value及一个表示key是否存在的bool型标志</span>value<span class="token punctuation">,</span> exists <span class="token operator">:=</span> dict<span class="token punctuation">[</span><span class="token string">"Blue"</span><span class="token punctuation">]</span><span class="token keyword">if</span> exists <span class="token punctuation">{</span>    <span class="token comment">//code here......</span><span class="token punctuation">}</span><span class="token comment">//2.直接通过key查询对应的value</span>value <span class="token operator">:=</span> dict<span class="token punctuation">[</span><span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>    <span class="token comment">//code here......</span><span class="token punctuation">}</span><span class="token comment">//遍历map</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> dict <span class="token punctuation">{</span>    <span class="token comment">//code here......</span><span class="token punctuation">}</span><span class="token comment">//在map中增加和修改元素的话就非常简单,直接写就行</span>dict<span class="token punctuation">[</span><span class="token string">"Red"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">//删除一个key，直接使用内置的delete函数</span><span class="token function">delete</span><span class="token punctuation">(</span>dict<span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这个题目的解决方法用图以O(N)的复杂度完成：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">strShaffle</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    dict <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">rune</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> str1 <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> dict<span class="token punctuation">[</span>ch<span class="token punctuation">]</span>        <span class="token keyword">if</span> exist <span class="token punctuation">{</span>            dict<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            dict<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> str2 <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> dict<span class="token punctuation">[</span>ch<span class="token punctuation">]</span>        <span class="token keyword">if</span> exist <span class="token punctuation">{</span>            dict<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">--</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> dict <span class="token punctuation">{</span>        <span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线(3)-CSS中级</title>
      <link href="2021/06/07/qian-duan-xue-xi-lu-xian-3-css-zhong-ji/"/>
      <url>2021/06/07/qian-duan-xue-xi-lu-xian-3-css-zhong-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="层叠与继承"><a href="#层叠与继承" class="headerlink" title="层叠与继承"></a>层叠与继承</h3><p><strong>定义的CSS规则顺序很重要：</strong></p><ul><li>当应用两条相同级别、相同权重的规则到一个元素的时候，<strong>写在后面</strong>的就是实际使用的规则。</li><li> 而权重不同时，描述的范围越小、越具体，优先级越高。如对于元素选择器和类选择器同时命中时，选择类选择器而不是根据前后顺序。</li></ul><p>那么在写CSS样式的时候，通常为基本元素规定一个通用的样式，然后为不同的元素创建对应的类。</p><p>对于优先级的确定，CSS文档给出了一个使用四位数确定优先级的方法，即千百十个位，可以根据下面的例子确定优先级：</p><table><thead><tr><th align="left">选择器</th><th align="left">千位</th><th align="left">百位</th><th align="left">十位</th><th align="left">个位</th><th align="left">优先级</th></tr></thead><tbody><tr><td align="left"><code>h1</code></td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">1</td><td align="left">0001</td></tr><tr><td align="left"><code>h1 + p::first-letter</code></td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">3</td><td align="left">0003</td></tr><tr><td align="left"><code>li &gt; a[href*="en-US"] &gt; .inline-warning</code></td><td align="left">0</td><td align="left">0</td><td align="left">2</td><td align="left">2</td><td align="left">0022</td></tr><tr><td align="left"><code>#identifier</code></td><td align="left">0</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">0100</td></tr><tr><td align="left">内联样式</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">1000</td></tr></tbody></table><p>对于<strong>继承</strong>而言，很难有一个规范取明确定义这个继承，而通常情况下要根据<strong>常识</strong>去确定继承关系。当然了，对于继承这种关系，CSS也定义了四个特殊的通用属性，这四个属性值可以被接收。</p><ul><li><code>inherit</code>：这是一个显式的开启继承关系属性，即指定内部元素应当遵从父元素的属性。</li><li><code>initial</code>：使属性值和浏览器默认相同，如果浏览器默认样式中未设置且该属性是自然继承的，那么会设置为 <code>inherit</code> 。</li><li><code>unset</code>： 将属性重置为<strong>自然值</strong>，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial</code>一样。</li><li><code>revert</code>：用的很少故不赘述。</li></ul><h3 id="CSS布局——display"><a href="#CSS布局——display" class="headerlink" title="CSS布局——display"></a>CSS布局——<code>display</code></h3><p>通过display可以控制元素的布局，默认为块级元素(block，如 <code>&lt;div&gt; &lt;h1&gt;-&lt;h6&gt; &lt;header&gt;</code>等)和行内元素(inline，如 <code>&lt;span&gt; &lt;a&gt; &lt;img&gt;</code>等)。</p><p><strong>特别地</strong>，需要区分 <code>display: none</code>和 <code>visibility: hidden</code>，区别就在于，前者不显示相应元素，不不占用应有的空间，后者也不显示相应的元素，但是会占用对应的空间，不会让出这个位置。</p><p>这里可以通过JavaScript结合控制元素是否显示，等后续学习相应内容再做讨论。</p><h3 id="CSS布局——width和max-width"><a href="#CSS布局——width和max-width" class="headerlink" title="CSS布局——width和max-width"></a>CSS布局——<code>width</code>和<code>max-width</code></h3><p>我们在设计页面时会以理想的情况下设计页面，但实际的浏览器页面会比我们想象的情况更复杂，比如在手机上浏览页面，所以设计出一个自适应的页面是一个基本要求。那么<code>width</code>在这种情况下就不如<code>max-width</code>自适应性更强，这里只要记住，用<code>max-width</code>，那么元素的宽度就是自适应的，使用<code>width</code>，那么它的宽度就是不可变的，这会使得页面不能被完全表示，这也促使我们在设计页面时考虑更多的细节，让读者的观感更好。</p><h3 id="CSS溢出"><a href="#CSS溢出" class="headerlink" title="CSS溢出"></a>CSS溢出</h3><p>定义一个文本框，如果本本内容超过了文本框所能承载的容量，CSS就可以设置显示方式， <code>overflow</code>属性指定在元素的内容太大而无法放入指定区域时是剪裁内容还是添加滚动条。</p><p><code>overflow</code> 属性可设置以下值：</p><ul><li><code>visible</code> - 默认。溢出没有被剪裁。内容在元素框外渲染</li><li><code>hidden</code> - 溢出被剪裁，其余内容将不可见</li><li><code>scroll</code> - 溢出被剪裁，同时添加滚动条以查看其余内容</li><li><code>auto</code> - 与 <code>scroll</code> 类似，但仅在必要时添加滚动条</li></ul><h3 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h3><p><code>float</code>属性规定元素在页面中如何浮动，不如如果我们想控制左边放图片，右边写文本，这个用HTML是不好写出来的，必须用CSS进行布局。<code>float</code>可以控制元素在容器中的位置，可以为左边或者右边，默认情况下是不浮动的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线(2)-CSS初级</title>
      <link href="2021/05/30/qian-duan-xue-xi-lu-xian-2-css-chu-ji/"/>
      <url>2021/05/30/qian-duan-xue-xi-lu-xian-2-css-chu-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h3><p>CSS是一种描述HTML文档样式的语言，简而言之，就是说应该如何显示HTML元素，控制一张网页的布局。</p><p>假如有一个HTML文件，通过样式表的不同表达方式，它最终展现在页面上的样式不同。</p><p>好像我日常写简单的HTML页面，也没感觉到CSS有什么用，但是一旦构造大型的网站，需要对网站内的每个页面都保持相似的风格，那么对标题、对段落、对表格、对图片等等的表现方式都要去一个一个去设置相同的字体、字号、背景、表格方式等等内容，那这个工作量太大了，所以出现了CSS，它可以<strong>宏观</strong>的规定标题要以什么方式呈现，段落里的文字要用多大的字号等，那这样HTML单负责记录文本内容就够了。</p><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3><p>CSS语法由<strong>选择器</strong>和<strong>声明块</strong>组成，比如我可以按如下方式规定段落的格式：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p</code>代表选择器，代表它指向HTML中的 <code>&lt;p&gt;</code>，下面就是对这个标签的文本规定：红色、12号字、文本居中。</p><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>CSS可以对HTML中的元素、id、类、通用元素进行选择，符合相应的条件的内容都会遵循声明块中的样式，具体的表达方法如下表所示：</p><table><thead><tr><th>选择器</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选取所有class=”intro”的元素</td></tr><tr><td>#id</td><td>#firstname</td><td>选取id=”firstname”的那<strong>一个</strong>元素(因为id是唯一的)</td></tr><tr><td>*</td><td>*</td><td>选取所有元素</td></tr><tr><td>element</td><td>p</td><td>选取所有 <code>&lt;p&gt;</code>元素</td></tr><tr><td>element,element,…</td><td>div, p</td><td>选取所有 <code>&lt;div&gt;</code>和 <code>&lt;p&gt;</code>元素</td></tr></tbody></table><h3 id="添加CSS"><a href="#添加CSS" class="headerlink" title="添加CSS"></a>添加CSS</h3><p>有三种插入样式表的方法：</p><ul><li><p>外部CSS</p><p>为样式表单独写一个 <code>.css</code> 文件，在HTML页面的 <code>head</code>部分的 <code>&lt;link&gt;</code>元素内包含对外部样式表文件的引用，例如以下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的样式表 <code>mystyle.css</code> 的代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> navy<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部CSS</p><p>如果要在某个单一的HTML规定相应的样式，在 <code>&lt;head&gt;</code>部分内 <code>&lt;style&gt;</code>中进行定义：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> linen<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> maroon<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>行内CSS</p><p>又称内联样式，可以为某个元素设置唯一的样式，这就需要将 <code>&lt;style&gt;</code> 属性中进行相应的定义：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>总而言之，按照如下的优先级覆盖样式：</p><p>1.行内样式(HTML)</p><p>2.外部和内部样式表(在head部分)</p><p>3.浏览器默认样式</p><h3 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h3><p>可以为HTML设置背景，并通过样式表规定这些背景的表现形式，常用的属性如下所示：</p><ul><li><code>background-color</code>：如#ffffff</li><li><code>background-image</code>：表示背景图片的url地址</li><li><code>background-repeat</code>：由于页面很大，背景图片不能覆盖整个页面，通过此项查看是否横向或纵向重复背景</li><li><code>background-attachment</code>：可以指定图像是否随着页面滚动而跟随移动</li><li><code>background-position</code>：背景在页面的开始位置</li></ul><h3 id="CSS边框"><a href="#CSS边框" class="headerlink" title="CSS边框"></a>CSS边框</h3><p>CSS使用<code>border</code>属性为指定元素设置边框的样式、宽度和颜色。</p><ul><li><strong>样式</strong>：使用<code>border-style</code>可以将边框设置为点、实现、混合等多种形式，具体风格可以查看教程对应部分</li><li><strong>宽度</strong>：使用<code>border-width</code>属性指定上右下左四个位置的宽度，可以统一设置宽度，也可以分别设置，提一嘴，上面的混合样式也是按照上右下左的顺序设置的</li><li><strong>颜色</strong>：<code>border-color</code>这个就不多提了</li></ul><h3 id="CSS内外边距合并"><a href="#CSS内外边距合并" class="headerlink" title="CSS内外边距合并"></a>CSS内外边距合并</h3><p>分别用<code>margin</code>和<code>padding</code>设置内外边距。注意，外边距可以为负值，而内边距只能为正值，合理设置外边距，可以使排版更合理，达到非常好的效果。</p><h3 id="CSS外边距合并"><a href="#CSS外边距合并" class="headerlink" title="CSS外边距合并"></a>CSS外边距合并</h3><p>当两个垂直的外边距相遇时，它们会合并成一个新的外边距，新的外边距取两者中的较大值。</p><p><img src="https://www.w3school.com.cn/i/css/margin_collapsing_1.gif" alt="CSS 外边距合并实例 1"></p><p>这种设计逻辑是合理的，因为文本之间的间距采用这种就是一倍行距，否则就变成了两倍行距。</p><h3 id="CSS高度和宽度"><a href="#CSS高度和宽度" class="headerlink" title="CSS高度和宽度"></a>CSS高度和宽度</h3><p>分别使用<code>height</code>和<code>width</code>设置元素的宽度和高度，注意，这里的宽度和高度不包括内边距、边框和外边距奥，而不仅仅是文本的宽度和高度。</p><h3 id="CSS框模型"><a href="#CSS框模型" class="headerlink" title="CSS框模型"></a>CSS框模型</h3><p>学习完上面的内容，也就引申出了看前端源码时非常常见的框模型。</p><p><img src="https://www.w3school.com.cn/i/css/boxmodel.gif" alt="CSS 框模型"></p><p>当两个框合并在一起的时候，只会表现出一个外边距，这称之为塌陷，这里呈现的外边距取最大值。</p><h3 id="CSS轮廓"><a href="#CSS轮廓" class="headerlink" title="CSS轮廓"></a>CSS轮廓</h3><p>轮廓是设置在边框之外的线，用以凸显元素</p><h3 id="其他初级教程"><a href="#其他初级教程" class="headerlink" title="其他初级教程"></a>其他初级教程</h3><p>涉及到了字体、图标、链接、图表等内容，这些等需要用的时候再去学就可以了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序开发入门(1)</title>
      <link href="2021/05/29/xiao-cheng-xu-kai-fa-ru-men-1/"/>
      <url>2021/05/29/xiao-cheng-xu-kai-fa-ru-men-1/</url>
      
        <content type="html"><![CDATA[<h3 id="文件组成"><a href="#文件组成" class="headerlink" title="文件组成"></a>文件组成</h3><p>在小程序开发的过程中，主要与四种文件类型接触：JSON、WXML、WXSS、JS。</p><p>其中JSON文件负责静态配置，可以全局或局部定义小程序的外观或页面路径等内容。</p><p>WXML有点类似HTML，区别主要在于它封装了HTML的一些标签，在写页面的时候可以更加方便，此外，在WXML中还可以增加条件判断和数据绑定。</p><p>WXSS负责样式，等待后续继续学习。</p><p>JS负责逻辑交互，比如如何获取用户点击，如何获取用户的位置等等，我们需要获取这些行为，并对这些行为做一些逻辑响应。通过JS提供的一些借口，可以方便调用微信内置的一些功能模块，如获取用户信息、本地存储、微信支付等模块内容。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>简要讲述一下小程序的层次结构。整个小程序的系统框架分为<strong>视图层</strong>和<strong>逻辑层</strong>，视图层依赖于试图描述语言WXML和WXSS，而逻辑层由JavaScript脚本语言控制，具体的层次结构如下图所示。</p><p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/4-1.ad156d1c.png" alt="img"></p><p>小程序提供了许多组件和API，后续再继续学习。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>小程序的根目录下面有三个主体文件：</p><ul><li><code>app.js</code>：负责小程序逻辑</li><li><code>app.json</code>：小程序的公共配置</li><li><code>app.wxss</code>：不是必需的，负责控制小程序的公共样式表</li></ul><p>对于一个小程序页面(page)，通常有四个文件：</p><ul><li><code>js</code>：负责页面逻辑</li><li><code>wxml</code>：负责页面结构</li><li><code>json</code>：不是必需的，负责页面的静态配置。如果在页面<code>json</code>下配置了相关内容，则会覆盖掉根目录下的相同配置项</li><li><code>wxss</code>：不是必须的，负责页面样式</li></ul><p>为了减少配置，这四个文件的文件名，要和页面名称相同。</p><p>总体来说，文件目录结构如下所示：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">├── app.js├── app.json├── app.wxss├── pages│   │── index│   │   ├── index.wxml│   │   ├── index.js│   │   ├── index.json│   │   └── index.wxss│   └── logs│       ├── logs.wxml│       └── logs.js└── utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这表明小程序有两个页面：index和logs。</p><h3 id="注册小程序"><a href="#注册小程序" class="headerlink" title="注册小程序"></a>注册小程序</h3><p> 每个小程序都需要在 <code>app.js</code> 中调用 <code>App</code> 方法注册小程序实例，绑定生命周期回调函数、错误监听和页面不存在监听函数等。 </p><p> 整个小程序只有一个 App 实例，是全部页面共享的。开发者可以通过 <code>getApp</code> 方法获取到全局唯一的 App 实例，获取App上的数据或调用开发者注册在 <code>App</code> 上的函数。 </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// xxx.js</span><span class="token keyword">const</span> appInstance <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appInstance<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span> <span class="token comment">// I am global data</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线(1)-HTML</title>
      <link href="2021/05/19/qian-duan-xue-xi-lu-xian-1-html/"/>
      <url>2021/05/19/qian-duan-xue-xi-lu-xian-1-html/</url>
      
        <content type="html"><![CDATA[<h3 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h3><p>为了提升自己对整个技术框架有一个更深入的了解，同时在写自己的毕业设计时也遇到了前端方面的知识，所以在此同一学习整理一下，为进一步学习Vue框架做一个简单的准备工作。</p><p>这里的记录的一些内容主要是平时不太注意到的或者比较重要的内容，有一些很基础的东西为了节约时间就不再记录了。</p><h3 id="段落和分行"><a href="#段落和分行" class="headerlink" title="段落和分行"></a>段落和分行</h3><p>使用<code>&lt;p&gt;&lt;/p&gt;</code>来定义一个段落，但是不要用这种方法来分隔一个空行，因为我们希望段落是有意义的。如果要定义一个空行，则使用<code>&lt;br/&gt;</code>，要使用一条横线分割内容，则使用 <code>&lt;hr/&gt;</code>。</p><h3 id="什么是样式"><a href="#什么是样式" class="headerlink" title="什么是样式"></a>什么是样式</h3><p>style用于更改HTML元素的表现形式，通常情况下使用CSS来专门定义元素的样式，这个以后再讨论，如果要在HTML中使用一些样式，可以按照如下的示例来使用：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>yellow</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本的格式化输出"><a href="#文本的格式化输出" class="headerlink" title="文本的格式化输出"></a>文本的格式化输出</h3><p>直接上代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>加粗文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>大号文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>斜体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>小号字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>上标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">&gt;</span></span>文本下面会出现横线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">&gt;</span></span>文字中间会出现一条横线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>代码文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是常见的文本格式，其他的用的就比较少了。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>短引用和长引用：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>短引用，内部内容会自动加双引号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span>长引用，没有双引号，但会整段缩进<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有更多的引用方式，比如英文首字母缩写、定义、著作标题等，在此不作重点讲述。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 这是单行内注释 --&gt;</span><span class="token comment">&lt;!-- 此刻不显示图片：&lt;img border="0" src="/i/tulip_ballade.jpg" alt="Tulip"&gt;--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有条件注释，需要用再查。</p><h3 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h3><p>CSS的全称是层叠样式表( Cascading Style Sheets)，有三种形式的样式表可供使用：</p><ul><li><p>外部样式表：某种样式需要应用到很多页面，使用外部样式表可以更改整个站点的外观设计，而不必一个文件一个文件地修改。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 会在mystyle.css中定义整体的样式 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部样式表：某个文件需要特别的样式，在head部分通过<code>&lt;style&gt;</code>定义。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内联样式：特殊样式需要应用到个别的元素。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>就先介绍这么多，后面会有CSS的系统学习。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接又可以称为锚，定义的标签为<a>，我们可以将网页作为链接，属性为href，这个用的太多了。也可以定位到页面的指定位置，属性为name，这需要将<strong>要定位</strong>的文本位置用<code>&lt;a name="XXX"&gt;&lt;/a&gt;</code>修饰，将需要转到锚点的文本用<code>&lt;a href="#XXX"&gt;&lt;/a&gt;</code>修饰。</a></p><a></a><h3 id="图像"><a></a><a href="#图像" class="headerlink" title="图像"></a>图像</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，图像的插入还有许多可选项，比如怎么插入、怎么调整尺寸、怎么创建连接等等，这里知道有这些项目，需要用的时候去查就好了。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>&lt;table&gt;</code>定义表格，<code>&lt;caption&gt;</code>定义表格标题，<code>&lt;th&gt;</code>定义表头，<code>&lt;tr&gt;</code>定义行，<code>&lt;td&gt;</code>是行内的单元格。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>分为无序列表(小圆点分隔各项)和有序列表(用1. 2. 3.排列各项)。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 无序的，unordered list --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 有序的，ordered list --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h3><p>这两个元素可用于分块，其实没有什么特别的含义。</p><p><code>&lt;div&gt;</code>属于块级元素，浏览器会在其前后显示折行，如果与 CSS 一同使用，<code>&lt;div&gt;</code> 元素可用于对大的内容块设置样式属性。</p><p> <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器，当与 CSS 一同使用时，<span> 元素可用于为部分文本设置样式属性。 </span></p><h3 id="HTML类"><a href="#HTML类" class="headerlink" title="HTML类"></a>HTML类</h3><p>可以在HTML文本中定义类，在元素中可以使用类。</p><p>下面给出一个使用示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.cities</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token punctuation">}</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cities<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>London<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML-id"><a href="#HTML-id" class="headerlink" title="HTML id"></a>HTML id</h3><p>用于为元素指定唯一的id，定义id的方法和类类似，但是把<code>.</code>替换为<code>#</code>。</p><p>在使用时，类是<code>class="xxx"</code>，id是<code>id="xxx"</code>。</p><p>类和id的<strong>不同点</strong>在于， 同一个类名可以由多个 HTML 元素使用，而一个 id 名称只能由页面中的一个 HTML 元素使用 。</p><p>还可以使用id和href实现文章内跳转，详见<a href="https://www.w3school.com.cn/html/html_id.asp">HTML id 属性</a> 。</p><h3 id="HTML-JavaScript"><a href="#HTML-JavaScript" class="headerlink" title="HTML JavaScript"></a>HTML JavaScript</h3><p>简单来说就是一种脚本罢了，可以实现交互和动态效果， 见用途是图像处理、表单验证和内容的动态更改。 </p><p>JS可以更改样式、内容和属性值。</p><p>更多内容等学习了JS再说吧。</p><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p>语义是一个比较宽泛的概念，简单来说就是数据或者词语的意义，也就是说，数据放在不同环境下会产生出不同的意义，那么在计算机的自然语言处理领域也蕴含着对语义的研究，在HTML里，语义可以理解为对于浏览器来说，它是可以传达其内容明确的含义的标签。</p><p>比如说，<code>&lt;div&gt; &lt;span&gt;</code>不能算是语义元素，因为我们不能根据标签理解其内容的明确含义，而 <code>&lt;form&gt; &lt;table&gt; &lt;img&gt;</code>则明确传递了某种含义，如这是一个表单、一个表格、一张图片，通过这些标签就可以知道这里面的东西是什么</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>列出一些HTML代码的常见规范：</p><ul><li>始终在文档的首行添加 <code>!DOCTYPE html</code></li><li>元素名尽量用小写</li><li>建议将所有的HTML元素关闭</li><li><strong>使用两个空格代替TAB键</strong></li></ul><p>其他要点随着写代码不断掌握。</p><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><p>HTML中的预留字符必须要使用实体来表示，或者键盘上不存在的符号以及Emoji表情，都能用实体来表示，比如&gt; &lt; &amp;  ∂ 等，有对应的实体名称，需要使用时查表即可。</p><h3 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h3><p>XHTML是以XML的形式编写的HTML，它相较HTML更纯净、更严格。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
